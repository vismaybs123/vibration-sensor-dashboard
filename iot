<!DOCTYPE html>
<html>
<head>
  <title>IoT Predictive Maintenance Dashboard</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      margin: 0;
      padding: 0;
    }
    #status {
      font-size: 1.5em;
      font-weight: bold;
      margin: 20px 0;
    }
    #chart {
      width: 80%;
      margin: auto;
      height: 400px;
    }
    .normal {
      color: green;
    }
    .faulty {
      color: red;
    }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <h1>IoT Predictive Maintenance Dashboard</h1>
  <div id="status" class="normal">Sensor Status: Working Well</div>
  <canvas id="chart"></canvas>

  <script>
    const THRESHOLD = 45; // Define your threshold value

    async function fetchData() {
      // Fetch data from ThingSpeak
      const response = await fetch(
        'https://api.thingspeak.com/channels/<2770851>/fields/1.json?api_key=<OG0QKXM9INEGF22M>&results=20');
      const data = await response.json();

      // Parse data
      const labels = data.feeds.map(feed => new Date(feed.created_at).toLocaleTimeString());
      const values = data.feeds.map(feed => parseInt(feed.field1 || 0)); // Parse values as integers

      // Determine if sensor is working well or faulty
      const latestValue = values[values.length - 1];
      const statusDiv = document.getElementById('status');
      if (latestValue > THRESHOLD) {
        statusDiv.textContent = 'Sensor Status: Faulty';
        statusDiv.className = 'faulty';
      } else {
        statusDiv.textContent = 'Sensor Status: Working Well';
        statusDiv.className = 'normal';
      }

      // Update chart
      const ctx = document.getElementById('chart').getContext('2d');
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Vibration Values',
            data: values,
            borderColor: 'rgba(75, 192, 192, 1)',
            borderWidth: 2,
            fill: false
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: { title: { display: true, text: 'Time' }},
            y: { title: { display: true, text: 'Vibration Level' }}
          }
        }
      });
    }

    // Refresh data periodically
    setInterval(fetchData, 15000); // Fetch data every 15 seconds
    fetchData(); // Initial fetch
  </script>
</body>
</html>
